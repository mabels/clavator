#!/bin/bash

# Last update: 2016-06-21
# *****************************************************
# !! REMEMBER TO SET PARAMETERS IN FILE "second-stage *
# *****************************************************

if [ "$(id -u)" != "0" ]; then
   echo "Script must be run as root !"
   exit 0
fi

echo ""
date
echo -e "\033[36m========================================================="
echo -e "Creating Ubuntu/Debian SD Card installation for Odroid-C2"
echo -e "=========================================================\033[37m"
echo ""

_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
cd $_DIR

. params.sh

#===================================================================

if [ "${_format}" = "btrfs" ]; then
    # WE MUST USE FAT PARTITION TO BOOT IF BTRFS IS USED
    _boot_on_ext4="no"
fi

# === CHECK DESTINATION ============================================
if [ ! "${image_name}" = "" ]; then
    if [ -b $image_name ] && [ "${_boot_on_ext4}" = "yes" ]; then
        # === ON BLOCK DEVICE ======================================
	echo "Creating filesystem on block device ${image_name} ..."
        sdcard=""
	odir="_mnt"
	bootdir="boot-$distro-sd"
	_boot_on_ext4="yes"
	_directsd="yes"
	# ==========================================================
    else
        # === ON IMAGE FILE ======================
	if [ "${_boot_on_ext4}" = "yes" ] ; then
	    sdcard="$distro-$image_name-nofat.img"
	else
	    sdcard="$distro-$image_name.img"
	fi
	odir="linux-$distro-$image_name"
	bootdir="boot-$distro-$image_name"
	# ========================================
    fi
else
    # === IN LOCAL DIRECTORY ===
    sdcard=""
    odir="linux-$distro"
    bootdir="boot-$distro"
    vfatuuid="6E35-5356"
    ext4uuid="e139ce78-9841-40fe-8823-96a304a09859"
    # ==========================
fi
# ==================================================================


# ============================================
if [ "${distro}" = "" ]; then
    echo "Distribution must be specified."
    exit 0
fi
if [ "${repo}" = "" ]; then
    echo "Repository must be specified."
    exit 0
fi
# ============================================

#===================================================================


_excode=0

# **** show progress *******
proc_wait() {
    spin='-\|/'

    i=0
    while kill -0 $1 2>/dev/null
    do
      i=$(( (i+1) %4 ))
      printf "\r$2 ${spin:$i:1}"
      sleep .1
    done
    _excode=$?

    if [ $_excode -eq 0 ]
    then
      printf "\rOK.                        \n"
    else
      printf "\rERROR.                     \n"
    fi
}
# **************************

if [ "${_format}" = "btrfs" ] ; then
    _mntopt="-o compress-force=lzo"
else
    _mntopt=""
fi

# ====================================================================
# IF CREATING ON IMMAGE, PREPARE SD CARD IMAGE FOR ODROID - LINUX BOOT
# --------------------------------------------------------------------
if [ ! "${sdcard}" = "" ]; then

    echo "Using disk image \"$sdcard\""
    if [ ! -f $BL1 ]; then
	echo "Error: $BL1 not found."
	exit 1
    fi

    if [ ! -f $UBOOT ]; then
	echo "Error: $UBOOT not found."
	exit 1
    fi

    # remove old image files
    rm ${sdcard} > /dev/null 2>&1
    rm ${sdcard}1 > /dev/null 2>&1
    rm ${sdcard}2 > /dev/null 2>&1
    rm ${sdcard}u > /dev/null 2>&1
    if [ "${_compress}" = "yes" ]; then
        rm ${sdcard}.md5sum > /dev/null 2>&1
        rm ${sdcard}.xz > /dev/null 2>&1
        rm ${sdcard}.xz.md5sum > /dev/null 2>&1
    fi

    if [ $linuxsize -eq 0 ]; then
	linuxsize=1024
    fi

    if [ "${_boot_on_ext4}" = "yes" ] ; then
        _ersz=$(expr $linuxsize + 2)
    else
        _ersz=$(expr $fatsize + $linuxsize + 2)
    fi

    echo "Creating bootable SD card image $sdcard, please wait ..."
    echo ""
    dd if=/dev/zero of=${sdcard} bs=1M count=$_ersz > /dev/null 2>&1
    echo "Creating partition images, please wait ..."
    if [ "${_boot_on_ext4}" = "yes" ] ; then
        dd if=/dev/zero of=${sdcard}1 bs=1M count=$linuxsize > /dev/null 2>&1
    else
		dd if=/dev/zero of=${sdcard}1 bs=1M count=$fatsize > /dev/null 2>&1
        dd if=/dev/zero of=${sdcard}2 bs=1M count=$linuxsize > /dev/null 2>&1
    fi
    sync
    sleep 2

    # Create msdos partition table
    echo ""
    echo "Creating new filesystem on $sdcard..."
    echo -e "o\nw" | fdisk ${sdcard} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
		echo "ERROR."
		exit 0
    fi
    sync
    echo "  New filesystem created on SD card."

    echo ""
    echo "Partitioning SD card $sdcard..."

    if [ "${_boot_on_ext4}" = "yes" ] ; then
		echo "  Creating ext4"
		sext4=3072
		if [ $linuxsize == 0 ]; then
			eext4=""
		else
			eext4=$(expr $linuxsize \* 1024 \* 1024 / 512 + $sext4 - 1)
		fi
		echo -e "n\np\n1\n$sext4\n$eext4\nt\n83\nw" | fdisk ${sdcard} > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			echo "ERROR."
			exit 0
		fi
    else
		sfat=3072
		efat=$(expr $fatsize \* 1024 \* 1024 / 512 + $sfat - 1)
		echo "  Creating fat & ext4"
		sext4=$(expr $efat + 1)
		if [ $linuxsize == 0 ]; then
			eext4=""
		else
			eext4=$(expr $linuxsize \* 1024 \* 1024 / 512 + $sext4 - 1)
		fi
		echo -e "n\np\n1\n$sfat\n$efat\nn\np\n2\n$sext4\n$eext4\nt\n1\n6\nt\n2\n83\nw" | fdisk ${sdcard} > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			echo "ERROR."
			exit 0
		fi
    fi
    echo "  OK."
    sync
    sleep 2

    echo ""
    if [ ! "${_boot_on_ext4}" = "yes" ] ; then
        echo "formatting fat partition ..."
	mkfs -t vfat -n BOOT ${sdcard}1 > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "ERROR formatting fat partition."
		exit 0
	fi
        vfatuuid=`blkid -s UUID -o value ${sdcard}1`
	echo "  fat partition formatted."
        echo "formatting linux partition, please wait ..."
	if [ "${_format}" = "btrfs" ] ; then
	    # format as btrfs
	    mkfs.btrfs -f -L $distro ${sdcard}2 > /dev/null 2>&1
	    if [ $? -ne 0 ]; then
		echo "ERROR formatting btrfs partition."
		exit 1
	    fi
	else
	    mkfs -F -t ext4 -L $distro ${sdcard}2 > /dev/null 2>&1
	    if [ $? -ne 0 ]; then
		    echo "ERROR formatting ext4 partition."
		    exit 1
	    fi
	    #tune2fs -o journal_data_writeback ${sdcard}2 > /dev/null 2>&1
	    #if [ $? -ne 0 ]; then
	    #	echo "ERROR tuning ext4 partition."
	    #	exit 0
	    #fi
	    #tune2fs -O ^has_journal ${sdcard}2 > /dev/null 2>&1
	    #if [ $? -ne 0 ]; then
	    #	echo "ERROR tuning ext4 partition."
	    #	exit 0
	    #fi
	fi
        ext4uuid=`blkid -s UUID -o value ${sdcard}2`
    else
	echo "formatting linux partition, please wait ..."
	if [ "${_format}" = "btrfs" ] ; then
	    # format as btrfs
	    mkfs.btrfs -f -L $distro ${sdcard}2 > /dev/null 2>&1
	    if [ $? -ne 0 ]; then
		echo "ERROR formatting btrfs partition."
		exit 1
	    fi
	else    
	    mkfs -F -t ext4 -L $distro ${sdcard}1 > /dev/null 2>&1
	    if [ $? -ne 0 ]; then
		    echo "ERROR formatting ext4 partition."
		    exit 0
	    fi
	    #tune2fs -o journal_data_writeback ${sdcard}1 > /dev/null 2>&1
	    #if [ $? -ne 0 ]; then
	    #	echo "ERROR tuning ext4 partition."
	    #	exit 0
	    #fi
	    #tune2fs -O ^has_journal ${sdcard}1 > /dev/null 2>&1
	    #if [ $? -ne 0 ]; then
	    #	echo "ERROR tuning ext4 partition."
	    #	exit 0
	    #fi
	fi
        ext4uuid=`blkid -s UUID -o value ${sdcard}1`
    fi
    echo "  linux partition formatted."

    echo ""
    echo "installing u-boot to $sdcard ..."
    dd if=$BL1 of=${sdcard} bs=1 count=442 conv=fsync > /dev/null 2>&1
    if [ $? -ne 0 ]; then
	echo "ERROR installing u-boot."
	exit 0
    fi
    dd if=$BL1 of=${sdcard} bs=512 skip=1 seek=1 conv=fsync > /dev/null 2>&1
    if [ $? -ne 0 ]; then
	echo "ERROR installing u-boot."
	exit 0
    fi
    dd if=$UBOOT of=${sdcard} bs=512 seek=97 conv=fsync > /dev/null 2>&1
    if [ $? -ne 0 ]; then
	echo "ERROR installing u-boot."
	exit 0
    fi
    sync

    dd if=${sdcard} of=${sdcard}u bs=512 count=3072 > /dev/null 2>&1
    rm ${sdcard}
    echo "U-boot installed to $sdcard."
else
    echo "Creating root filesystem in local directory $odir..."
fi
# ======================================================================


# ===================
# Prepare directories
# ===================
if [ ! "${_boot_on_ext4}" = "yes" ] ; then
    if [ ! -d $bootdir ]; then
	mkdir -p $bootdir
    fi
    rm $bootdir/* > /dev/null 2>&1
    sync
    umount $bootdir > /dev/null 2>&1
fi

if [ ! -d $odir ]; then
    mkdir -p $odir
fi
rm -rf "${odir:?}/"* > /dev/null 2>&1
sync

# =============================================
# IF USING PHYSICAL PARTITION, FORMAT AND MOUNT
# =============================================
if [ "${_directsd}" = "yes" ] ; then
    umount $image_name > /dev/null 2>&1
    if [ "${_format}" = "ext4" ] ; then
        # ** formatting as ext4
	if ! mkfs.ext4 -F -L linux_e ${image_name} > /dev/null 2>&1; then
	  echo "ERROR formatting $image_name."
	  exit 1
	fi
        partprobe -s ${image_name} > /dev/null 2>&1
    fi
    if [ "${_format}" = "btrfs" ] ; then
        # format as btrfs
	if ! mkfs.btrfs -f -L linux_b ${image_name} > /dev/null 2>&1; then
	  echo "ERROR formatting $image_name."
	  exit 1
	fi
        partprobe -s ${image_name} > /dev/null 2>&1
	if ! mount -o compress=lzo $image_name $odir; then
	    echo "ERROR mounting $image_name."
	    exit 1
	fi
    else
        # do not format, only mount
	if ! mount $image_name $odir; then
	    echo "ERROR mounting $image_name."
	    exit 1
	fi
    fi
    ext4uuid=`blkid -s UUID -o value ${image_name}`
    echo "${image_name} mounted to ${odir}."
    rm -rf "${odir:?}/"* > /dev/null 2>&1
    sync
else
    umount $odir > /dev/null 2>&1
    sleep 1
fi

# ===========================================
# IF USING SD CARD OR IMAGE, MOUNT PARTITIONS
# ===========================================
if [ ! "${sdcard}" = "" ]; then
    echo ""
    echo "Mounting SD Card partitions..."

    if [ ! "${_boot_on_ext4}" = "yes" ] ; then
	if ! mount ${sdcard}1 $bootdir; then
	    echo "ERROR mounting partitions..."
	    exit 1
	fi
	if ! mount ${_mntop} ${sdcard}2 $odir; then
	    echo "ERROR mounting partitions..."
	    umount $bootdir
	    exit 1
	fi
        echo "SD Card partitions mounted to $odir & $bootdir"
    else
	if ! mount ${_mntop} ${sdcard}1 $odir; then
	    echo "ERROR mounting partitions..."
            if [ ! "${_boot_on_ext4}" = "yes" ] ; then
	        umount $bootdir
	    fi
	    exit 1
	fi
    fi
    echo "SD Card partition mounted to $odir"
fi

#===================================================================================================================
# ========================
# DEBOOTSTRAP LINUX DISTRO
# ========================
echo ""

touch $odir/_$distro

echo "DEBOOTSTRAP, FIRST STAGE"
debootstrap --arch $arch --foreign --verbose --variant=minbase --include=wget ${distro} $odir $repo > /dev/null 2>&1 &
pid=$!
proc_wait $pid "please wait"
if [ $_excode -ne 0 ]; then
    echo "ERROR IN DEBOOTSTRAP!"
    exit 0
fi

# ***************************
# ** CREATE NEW sources.list:
# ***************************
echo "Creating \"sources.list\""
case ${distro} in
xenial*)
cat > $odir/sources.list << _EOF_
deb $repo/ $distro main restricted universe multiverse
deb-src $repo/ $distro main restricted universe multiverse
deb $repo/ $distro-updates main restricted universe multiverse
deb-src $repo/ $distro-updates main restricted universe multiverse
deb $repo/ $distro-security main restricted universe multiverse
deb $repo/ $distro-backports main restricted universe multiverse
deb http://deb.odroid.in/c2/ xenial main
_EOF_
;;*)
cat > $odir/sources.list << _EOF_
deb $repo/ $distro main contrib non-free
deb-src $repo/ $distro main contrib non-free

deb $repo/ $distro-updates main contrib non-free
deb-src $repo/ $distro-updates main contrib non-free

deb $repo/ $distro-backports main contrib non-free
deb-src $repo/ $distro-backports main contrib non-free
deb http://deb.odroid.in/c2/ xenial main
_EOF_
;;esac


# ==============================================
# Make necessary directories and copy some files
# ==============================================
mkdir -p $odir/etc/default > /dev/null 2>&1
if [ ! "${_boot_on_ext4}" = "yes" ] ; then
    mkdir -p $odir/media/boot
fi
mkdir -p $odir/media/odroid
mkdir -p $odir/usr/local/bin
mkdir -p $odir/usr/bin > /dev/null 2>&1

cp /etc/timezone $odir/etc
cp /usr/bin/qemu-*-static $odir/usr/bin
cp second-stage $odir/second-stage
cp params.sh $odir/params.sh



# =====================================================================================
# Execute debootstram second stage and install base system
# =====================================================================================

if ! chroot $odir $qemu /bin/bash /second-stage; then
    mv $odir/install.log . > /dev/null 2>&1
    echo "================================================"
    echo "ERROR on second-stage, installation NOT FINISHED."
    echo "================================================"
    exit 1
fi

if [ ! -f $odir/_OK_ ]; then
    mv $odir/install.log . > /dev/null 2>&1
    echo "================================================"
    echo "ERROR on second-stage, installation NOT FINISHED."
    echo "================================================"
    exit 1
fi

#======================================================================================

rm $odir/_OK_ > /dev/null 2>&1
rm $odir/second-stage > /dev/null 2>&1
rm $odir/params.sh > /dev/null 2>&1
mv $odir/install.log ./install-${distro}.log > /dev/null 2>&1

# === Copy scripts ========================
cp fs_resize $odir/usr/local/bin

# === Copy boot files ==============================
if [ ! "${_boot_on_ext4}" = "yes" ] ; then
    cp $odir/boot/config* $bootdir
    cp $odir/boot/uInitrd* $bootdir/uInitrd
    cp $odir/boot/vmlinuz* $bootdir/Image
    cp $odir/boot/meson64* $bootdir
    cp $odir/boot/System.map* $bootdir
    rm -rf $odir/media/boot/*
fi

# Test
if [ ! -f $odir/boot/uInitrd ]; then
    echo "============================="
    echo "WARNING: uInitrd NOT CREATED !"
    echo "============================="
    #exit 0
fi
sync

rm -rf $odir/dev/*
rm -rf $odir/proc/*
rm -rf $odir/run/*
rm -rf $odir/sys/*
rm -rf $odir/tmp/*

echo ""

# ***************
# Create fstab
# ***************
echo "Creating \"fstab\""
echo "# Odroid fstab" > $odir/etc/fstab
echo "" >> $odir/etc/fstab
if [ "${_format}" = "btrfs" ] ; then
    echo "UUID=$ext4uuid  /  btrfs  noatime,nodiratime,compress=lzo  0 1" >> $odir/etc/fstab
else
#    echo "#UUID=$ext4uuid  /  ext4  errors=remount-ro,noatime,nodiratime,data=writeback  0 1" >> $odir/etc/fstab
    echo "UUID=$ext4uuid  /  ext4  errors=remount-ro,noatime,nodiratime  0 1" >> $odir/etc/fstab
fi
if [ ! "${_boot_on_ext4}" = "yes" ] ; then
    echo "UUID=${vfatuuid}  /media/boot  vfat  defaults,rw,owner,flush,umask=000  0 0" >> $odir/etc/fstab
fi
echo "tmpfs /tmp  tmpfs nodev,nosuid,mode=1777  0 0" >> $odir/etc/fstab



# ==============================
# CREATE Odroid-C2 boot.ini file
# You can modify parameters
# ==============================
if [ "${_boot_on_ext4}" = "yes" ] ; then
    if [ "${_directsd}" = "yes" ] ; then
	_ul1="fatload mmc 0:1 \${loadaddr} Image"
	_ul2="fatload mmc 0:1 \${initrd_loadaddr} uInitrd"
	_ul3="fatload mmc 0:1 \${dtb_loadaddr} meson64_odroidc2.dtb"
    else
	_ul1="ext4load mmc 0:1 \${loadaddr} boot/Image"
	_ul2="ext4load mmc 0:1 \${initrd_loadaddr} boot/uInitrd"
	_ul3="ext4load mmc 0:1 \${dtb_loadaddr} boot/meson64_odroidc2.dtb"
    fi
    _bootd="$odir/boot/boot.ini"
else
    _ul1="fatload mmc 0:1 \${loadaddr} Image"
    _ul2="fatload mmc 0:1 \${initrd_loadaddr} uInitrd"
    _ul3="fatload mmc 0:1 \${dtb_loadaddr} meson64_odroidc2.dtb"
    _bootd="$bootdir/boot.ini"
fi

. uboot_config.sh


cp $_bootd ./$distro-boot.ini > /dev/null 2>&1
sync

# ================================================
# IF CREATING IMAGE unmount and create final image
# ================================================
if [ ! "${sdcard}" = "" ]; then
    if [ ! "${_boot_on_ext4}" = "yes" ] ; then
      if ! umount -l $bootdir; then
	  echo "ERROR unmounting fat partition."
	  exit 0
      fi
      rm -rf "${bootdir:?}/"* > /dev/null 2>&1
      rmdir $bootdir > /dev/null 2>&1
    fi
    if ! umount -l $odir; then
	echo "ERROR unmounting ext4 partitions."
	exit 0
    fi
    rm -rf "${odir:?}/"* > /dev/null 2>&1
    rmdir $odir > /dev/null 2>&1
    sync

    echo "Creating SDCard image..."
    dd if=${sdcard}u of=${sdcard} > /dev/null 2>&1
    if [ -f ${sdcard}1 ]; then
        dd if=${sdcard}1 of=${sdcard} bs=1M conv=notrunc oflag=append > /dev/null 2>&1
    fi
    if [ -f ${sdcard}2 ]; then
        dd if=${sdcard}2 of=${sdcard} bs=1M conv=notrunc oflag=append > /dev/null 2>&1
    fi

    if [ "${_compress}" = "yes" ]; then
        echo "Compressing image..."
        xz -z -k -9 -f -v $sdcard
        md5sum $sdcard > $sdcard.md5sum
        md5sum $sdcard.xz > $sdcard.xz.md5sum
    fi
fi

if [ "${_directsd}" = "yes" ] ; then
    if ! umount $odir; then
	echo "ERROR unmounting ext4 partitions."
    fi
fi

echo ""
date
echo ""
echo "************************************************************"
echo "installation finished."
echo ""
if [ ! "${sdcard}" = "" ]; then
    echo "You have bootable Odroid-C2 SD Card image \"${sdcard}\"."
    echo "Use dd to copy to your SDCard"
    echo "  e.g. sudo dd if=$sdcard of=/dev/<your_sdcard> bs=1M"
else
    if [ "${_directsd}" = "yes" ] ; then
        echo "You have Odroid-C2 $distro installation on $image_name."
    else
	if [ ! "${_boot_on_ext4}" = "yes" ] ; then
	    echo "Copy files from $bootdir to SD Card boot partition"
	    echo "  e.g.  cp $bootdir/* <path_to_sdcard_boot_mount>"
	    echo "  and rsync $odir to SD Card ext4 partition."
	    echo "  e.g. sudo rsync -r -t -p -o -g -x -v --progress --delete -l -H -D --numeric-ids -s $PWD/$odir/ <path_to_sdcard_ext4_mount>/"
	else
	    echo "Rsync files from $odir to SD Card ext4 partition"
	    echo "  e.g. sudo rsync -r -t -p -o -g -x -v --progress --delete -l -H -D --numeric-ids -s $PWD/$odir/ <path_to_sdcard_ext4_mount>/"
	fi
	echo "UPDATE \"/etc/fstab\" AND  \"boot.ini\" WITH SDCard PARTITIONS UUID's if necessary!"
	echo ""
	echo "Or create SDCard image running:"
	echo "  sudo ./image_from_dir $odir [yes|no]"
	echo "    yes|no - create or not ext4 only system"
    fi
    echo ""
    echo "You can chroot into \"$odir\" to make additional changes:"
    if [ "${_directsd}" = "yes" ] ; then
        echo "  sudo mount $image_name $odir"
    fi
    echo "  sudo chroot $odir $qemu /bin/bash"
fi
echo ""
echo "************************************************************"
echo "* AFTER BOOTING:                                           *"
echo "* -------------------------------------------------------- *"
echo "* To resize linux partition to fill sd card run:           *"
echo "*   sudo fs_resize                                         *"
echo "* -------------------------------------------------------- *"
echo "*   DON'T FORGET TO RESIZE SD CARD IF NECESSARY            *"
echo "* -------------------------------------------------------- *"
echo "* To configure your local settings use:                    *"
echo "*   sudo dpkg-reconfigure tzdata                           *"
echo "*   sudo dpkg-reconfigure keyboard-configuration           *"
echo "*   sudo dpkg-reconfigure console-setup                    *"
echo "*     # change your system's locale entries by modifying   *"
echo "*     # the file /etc/default/locale (e.g. en_US.UTF-8)    *"
echo "*     # then run:                                          *"
echo "*   sudo locale-gen <your_locale> (e.g en_US.UTF-8)        *"
echo "*   sudo dpkg-reconfigure locales                          *"
echo "************************************************************"
echo ""
echo ""

exit 0
