#!/bin/bash

# ********************************************
# This is part of "create_odroid_image" script
# Do not execute !!
# ********************************************

. params.sh

_LOGFILE="/install.log"

export DEBIAN_FRONTEND=noninteractive

#*********************
# ** CONFIGURE NETWORK
#*********************
set_network() {
mkdir -p /etc/network
cat >> /etc/network/interfaces << _EOF_
# interfaces(5) file used by ifup(8) and ifdown(8)
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
_EOF_

# ** SET hostname
echo ${HOSTNAME} > /etc/hostname
}


# *************************************************
# ** Some tricks to make everything work
# *************************************************
do_tricks() {

_DST=`lsb_release -si`

# ADJUST rc.local for some tuning
cat > /etc/rc.local << _EOF_
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# ** Limit ethernet speed
#ethtool -s eth0 speed 100 duplex full

# ** Overclock to 1.728 GHz
#echo 1728000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq

_EOF_

if [ ! "${_DST}" = "Ubuntu" ] ; then
    echo "/usr/local/bin/c2_init.sh" >> /etc/rc.local
fi
echo "exit 0" >> /etc/rc.local


# *****************************
# Setup tmux to show the cursor
cat > /root/.tmux.conf << _EOF_
setw -ga terminal-overrides ',*:Cc=\E[?120;%p1%s;240c:Cr=\E[?120;0;240c:civis=\E[?25l:cnorm=\E[?25h:cvvis=\E[?25h,'
set -g status-bg black
set -g status-fg white
_EOF_

cat > /home/$USER/.tmux.conf << _EOF_
setw -ga terminal-overrides ',*:Cc=\E[?120;%p1%s;240c:Cr=\E[?120;0;240c:civis=\E[?25l:cnorm=\E[?25h:cvvis=\E[?25h,'
set -g status-bg black
set -g status-fg white
_EOF_


#*********************
# WARNING TO RESIZE FS
cat > /usr/local/bin/fs_resize_warning << _EOF_
#!/bin/sh

echo -e "\033[31m\033[1m**********************************"
echo -e "WARNING: TO RESIZE FILESYSTEM RUN:"
echo -e "sudo fs_resize"
echo -e "**********************************\033[22m\033[37m"

_EOF_

chmod +x /usr/local/bin/fs_resize_warning > /dev/null 2>&1


# ******************************************
cat >> /root/.bashrc << _EOF_

if [ -f /usr/local/bin/fs_resize_warning ]; then
. /usr/local/bin/fs_resize_warning
fi
_EOF_

cat >> /home/$USER/.bashrc << _EOF_

if [ -f /usr/local/bin/fs_resize_warning ]; then
. /usr/local/bin/fs_resize_warning
fi

_EOF_

}
_excode=0

# ---- Internal: wait for process to end --------
proc_wait() {
    spin='-\|/'

    i=0
    while kill -0 $1 2>/dev/null
    do
      i=$(( (i+1) %4 ))
      printf "\r$2 ${spin:$i:1}"
      sleep .1
    done
    _excode=$?

    if [ $_excode -eq 0 ]
    then
      printf "\rOK.                        \n"
    else
      printf "\rERROR.                     \n"
      exit 1
    fi
}
# -----------------------------------------------



# ====================================================

if [ ! -f /debootstrap/debootstrap ]; then
    exit 1
fi


echo "DEBOOTSTRAP, SECOND-STAGE"
/debootstrap/debootstrap --second-stage >> $_LOGFILE &
pid=$! # Process Id of the previous running command
sleep 0.2
echo -e "\033[1A\033[K"
proc_wait $pid "please wait"

if [ ! $_excode -eq 0 ]; then
  echo "*********************"
  echo "** debootstrap ERROR."
  echo "*********************"
  exit 1
fi

echo "DEBOOTSTRAP, SECOND-STAGE FINISHED."
sleep 1

_apt="-y -q"

mv /sources.list /etc/apt/sources.list
echo "LANG=\"$LANG\"" > /etc/default/locale
echo "LC_ALL=\"$LANG\"" >> /etc/default/locale

export LANG=${LANG}
echo ""
export LC_ALL=${LANG}
sleep 0.1
echo -e "\033[1A\033[K"
export LANGUAGE=${LANGUAGE}

set_network

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys AB19BAC9 >> $_LOGFILE 2>&1

#---------------------------------------------------------------------
if [ -f /etc/init.d/udev ]; then
    cat /etc/init.d/udev | sed '/### END INIT INFO/a\exit 0' > /tmp/_udev_
    mv /tmp/_udev_ /etc/init.d/udev
fi
#---------------------------------------------------------------------

echo "======================="
echo "Updating & upgrading..."
apt-get update >> $_LOGFILE 2>&1 &
pid=$!
proc_wait $pid "please wait"
apt-get ${_apt} upgrade >> $_LOGFILE 2>&1 &
pid=$!
proc_wait $pid "please wait"
apt-get clean >> $_LOGFILE 2>&1


echo "Installing essential packages..."
apt-get ${_apt} install lsb-release >> $_LOGFILE 2>&1 &
pid=$!
proc_wait $pid "please be patient"
apt-get clean >> $_LOGFILE 2>&1


_DST=`lsb_release -si`
_REL=`lsb_release -sc`
echo ""
echo -e "\033[31m\033[1m*** Installing $_DST $_REL ***\033[22m\033[37m"
echo ""

# ** INSTALL essential packages
echo "Installing base packages..."
apt-get ${_apt} install udev apt-utils locales dialog sudo isc-dhcp-client netbase ifupdown iproute openssh-server iputils-ping wget curl ntp less tzdata console-common module-init-tools u-boot-tools initramfs-tools keyboard-configuration console-setup xz-utils fbset ca-certificates cron --no-install-recommends >> $_LOGFILE 2>&1 &
pid=$!
proc_wait $pid "please be patient"
apt-get clean >> $_LOGFILE 2>&1

# ** INSTALL base language pack for your language
if [ "${_DST}" = "Ubuntu" ] ; then
    echo "Installing language pack..."
    apt-get ${_apt} install language-pack-$LANGUAGE-base --no-install-recommends >> $_LOGFILE 2>&1 &
    pid=$!
    proc_wait $pid "please wait"
    apt-get clean >> $_LOGFILE 2>&1
else
    cat /etc/locale.gen | sed s/"# $LANG"/"$LANG"/g > /tmp/locale.gen
    mv /tmp/locale.gen /etc/locale.gen
    locale-gen >> $_LOGFILE 2>&1
fi

# ** INSTALL more useful packages ....
echo "Installing more packages..."
apt-get ${_apt} install nano htop man-db tmux net-tools ethtool uuid fake-hwclock --no-install-recommends >> $_LOGFILE 2>&1 &
pid=$!
proc_wait $pid "please wait"
apt-get clean >> $_LOGFILE 2>&1

# === install Hardkernel's packages ======
rm -Rf /boot/* >> $_LOGFILE 2>&1

echo "Installing Odroid C2 kernel..."

# === Install scripts from bootini package ===
mkdir -p /tmp/btini >> $_LOGFILE 2>&1
apt-get ${_apt} download bootini >> $_LOGFILE 2>&1
dpkg-deb -x *.deb /tmp/btini/
cp -r -v /tmp/btini/etc/* /etc >> $_LOGFILE 2>&1
if [ ! "${_DST}" = "Ubuntu" ] ; then
  mv /etc/initramfs-tools/scripts/local-top/c2_init.sh /usr/local/bin
fi
rm -rf /tmp/btini/* >> $_LOGFILE 2>&1
rmdir /tmp/btini >> $_LOGFILE 2>&1
rm -rf *.deb >> $_LOGFILE 2>&1

# === Install kernel ===
apt-get ${_apt} install linux-image-c2 mali-fbdev >> $_LOGFILE 2>&1 &
pid=$!
proc_wait $pid "please wait"
apt-get clean >> $_LOGFILE 2>&1
# =======================================

# ** CONFIGURE time zone, keyboard layout, console ...
echo "Configuring, please wait..."
if [ ! "${_timezone}" = "" ] ; then
    echo $_timezone > /etc/timezone
fi
echo "*** LOCALE ***" >> $_LOGFILE 2>&1
locale-gen $LANG >> $_LOGFILE 2>&1
echo "*** TZDATA ***" >> $_LOGFILE 2>&1
dpkg-reconfigure tzdata >> $_LOGFILE 2>&1
echo "*** KEYBOARD ***" >> $_LOGFILE 2>&1
dpkg-reconfigure keyboard-configuration >> $_LOGFILE 2>&1
echo "*** LOCALES ***" >> $_LOGFILE 2>&1
dpkg-reconfigure locales >> $_LOGFILE 2>&1
echo "*** CONSOLE ***" >> $_LOGFILE 2>&1
dpkg-reconfigure console-setup >> $_LOGFILE 2>&1

echo "*** USER/PASSWORD ***" >> $_LOGFILE 2>&1
# ** CREATE root password
echo "CREATING root PASSWORD..."
#passwd
echo root:$ROOTPASS | chpasswd

# ** ADD USER
echo "ADDING USER..."
# set default shell to /bin/bash
cat /etc/default/useradd | sed s/"SHELL=\/bin\/sh"/"SHELL=\/bin\/bash"/g > /tmp/useradd
mv /tmp/useradd /etc/default/useradd
useradd -m -s "/bin/bash" $USER >> $_LOGFILE 2>&1
echo $USER:$USERPASS | chpasswd
usermod -c $USER $USER >> $_LOGFILE 2>&1
adduser $USER sudo >> $_LOGFILE 2>&1

# ** Tricks
do_tricks

# misc setup
systemctl enable ntp

touch /home/$USER/.sudo_as_admin_successful

#----------------------------------------------------
if [ -f /etc/init.d/udev ]; then
    cat /etc/init.d/udev | sed '/^exit 0/d' > /tmp/_udev_
    mv /tmp/_udev_ /etc/init.d/udev
    echo "exit 0" >> /etc/init.d/udev
    chmod +x /etc/init.d/udev
fi
#----------------------------------------------------

killall -KILL ntpd > /dev/null 2>&1
killall -KILL smbd > /dev/null 2>&1

chown -R $USER:$USER /home/$USER

echo ""
echo "Installation finished."
echo ""
touch /_OK_

exit 0
