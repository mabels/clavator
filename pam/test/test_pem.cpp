


#include <cascara/cascara.hpp>
using namespace cascara;

#include "../src/pem.hpp"


int main() {
  describe("Pem", []() {

    it("read", []() {
      std::stringstream s2;
      for (size_t i = 0; i < 3; ++i) {
        s2 << "-----BEGIN CERTIFICATE-----\n";
        s2 << "MIICKDCCAZGgAwIBAgIBATANBgkqhkiG9w0BAQUFADAsMSowKAYDVQQDEyFUaGUg\n";
        s2 << "U1RFRUQgU2VsZi1TaWduaW5nIE5vbnRob3JpdHkwIBcNMTExMTExMDAwMDAwWhgP\n";
        s2 << "MjEwNjAyMDYwMDAwMDBaMCwxKjAoBgNVBAMTIVRoZSBTVEVFRCBTZWxmLVNpZ25p\n";
        s2 << "bmcgTm9udGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAk2h9kqe8\n";
        s2 << "0eb8ESY7UGV6j6S5zuP5DiM4TWJ3jKG2y+D2CyA1Sl90iZ6zyN3zCB0yR1xxhpuw\n";
        s2 << "xdrwBRovRFludAbx3MeynYhzXkk0Hwn038q1oIt2YUw3Igz34s24o455ZE86JQ/6\n";
        s2 << "5dC7ppF8Z1I9KBL96NO+qZR/alVAKxYAwS8CAwEAAaNYMFYwEgYDVR0TAQH/BAgw\n";
        s2 << "BgEB/wIBATARBgorBgEEAdpHAgICBAMBAf8wHQYDVR0OBBYEFGimOJmN+rrFEOpk\n";
        s2 << "XONPloay7ffqMA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOBgQB3JwUn\n";
        s2 << "AbOdGv5ErojNSSP+yGZIy5av4wnkzK840Uj3jY6A5cuHroZGOD60hqLV2Hy0npox\n";
        s2 << "zte4phWEKWmZiXd8SCmd3MFNgZSieiixye0qxSmuqYft2j6NhEXD5xc/iTTjFT42\n";
        s2 << "SjGPLKAICuMBuGPnoozOEVlgqwaDqKOUph5sqw==\n";
        s2 << "-----END CERTIFICATE-----\n";
      }
      unsigned char binary[] = {
        0x30, 0x82, 0x02, 0x28, 0x30, 0x82, 0x01, 0x91, 0xa0,
        0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x01, 0x30, 0x0d,
        0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
        0x01, 0x05, 0x05, 0x00, 0x30, 0x2c, 0x31, 0x2a, 0x30,
        0x28, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x21, 0x54,
        0x68, 0x65, 0x20, 0x53, 0x54, 0x45, 0x45, 0x44, 0x20,
        0x53, 0x65, 0x6c, 0x66, 0x2d, 0x53, 0x69, 0x67, 0x6e,
        0x69, 0x6e, 0x67, 0x20, 0x4e, 0x6f, 0x6e, 0x74, 0x68,
        0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x20, 0x17, 0x0d,
        0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x5a, 0x18, 0x0f, 0x32, 0x31, 0x30,
        0x36, 0x30, 0x32, 0x30, 0x36, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x5a, 0x30, 0x2c, 0x31, 0x2a, 0x30, 0x28,
        0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x21, 0x54, 0x68,
        0x65, 0x20, 0x53, 0x54, 0x45, 0x45, 0x44, 0x20, 0x53,
        0x65, 0x6c, 0x66, 0x2d, 0x53, 0x69, 0x67, 0x6e, 0x69,
        0x6e, 0x67, 0x20, 0x4e, 0x6f, 0x6e, 0x74, 0x68, 0x6f,
        0x72, 0x69, 0x74, 0x79, 0x30, 0x81, 0x9f, 0x30, 0x0d,
        0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
        0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30,
        0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0x93, 0x68, 0x7d,
        0x92, 0xa7, 0xbc, 0xd1, 0xe6, 0xfc, 0x11, 0x26, 0x3b,
        0x50, 0x65, 0x7a, 0x8f, 0xa4, 0xb9, 0xce, 0xe3, 0xf9,
        0x0e, 0x23, 0x38, 0x4d, 0x62, 0x77, 0x8c, 0xa1, 0xb6,
        0xcb, 0xe0, 0xf6, 0x0b, 0x20, 0x35, 0x4a, 0x5f, 0x74,
        0x89, 0x9e, 0xb3, 0xc8, 0xdd, 0xf3, 0x08, 0x1d, 0x32,
        0x47, 0x5c, 0x71, 0x86, 0x9b, 0xb0, 0xc5, 0xda, 0xf0,
        0x05, 0x1a, 0x2f, 0x44, 0x59, 0x6e, 0x74, 0x06, 0xf1,
        0xdc, 0xc7, 0xb2, 0x9d, 0x88, 0x73, 0x5e, 0x49, 0x34,
        0x1f, 0x09, 0xf4, 0xdf, 0xca, 0xb5, 0xa0, 0x8b, 0x76,
        0x61, 0x4c, 0x37, 0x22, 0x0c, 0xf7, 0xe2, 0xcd, 0xb8,
        0xa3, 0x8e, 0x79, 0x64, 0x4f, 0x3a, 0x25, 0x0f, 0xfa,
        0xe5, 0xd0, 0xbb, 0xa6, 0x91, 0x7c, 0x67, 0x52, 0x3d,
        0x28, 0x12, 0xfd, 0xe8, 0xd3, 0xbe, 0xa9, 0x94, 0x7f,
        0x6a, 0x55, 0x40, 0x2b, 0x16, 0x00, 0xc1, 0x2f, 0x02,
        0x03, 0x01, 0x00, 0x01, 0xa3, 0x58, 0x30, 0x56, 0x30,
        0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff,
        0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01,
        0x01, 0x30, 0x11, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
        0x01, 0xda, 0x47, 0x02, 0x02, 0x02, 0x04, 0x03, 0x01,
        0x01, 0xff, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
        0x04, 0x16, 0x04, 0x14, 0x68, 0xa6, 0x38, 0x99, 0x8d,
        0xfa, 0xba, 0xc5, 0x10, 0xea, 0x64, 0x5c, 0xe3, 0x4f,
        0x96, 0x86, 0xb2, 0xed, 0xf7, 0xea, 0x30, 0x0e, 0x06,
        0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
        0x03, 0x02, 0x01, 0x06, 0x30, 0x0d, 0x06, 0x09, 0x2a,
        0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05,
        0x00, 0x03, 0x81, 0x81, 0x00, 0x77, 0x27, 0x05, 0x27,
        0x01, 0xb3, 0x9d, 0x1a, 0xfe, 0x44, 0xae, 0x88, 0xcd,
        0x49, 0x23, 0xfe, 0xc8, 0x66, 0x48, 0xcb, 0x96, 0xaf,
        0xe3, 0x09, 0xe4, 0xcc, 0xaf, 0x38, 0xd1, 0x48, 0xf7,
        0x8d, 0x8e, 0x80, 0xe5, 0xcb, 0x87, 0xae, 0x86, 0x46,
        0x38, 0x3e, 0xb4, 0x86, 0xa2, 0xd5, 0xd8, 0x7c, 0xb4,
        0x9e, 0x9a, 0x31, 0xce, 0xd7, 0xb8, 0xa6, 0x15, 0x84,
        0x29, 0x69, 0x99, 0x89, 0x77, 0x7c, 0x48, 0x29, 0x9d,
        0xdc, 0xc1, 0x4d, 0x81, 0x94, 0xa2, 0x7a, 0x28, 0xb1,
        0xc9, 0xed, 0x2a, 0xc5, 0x29, 0xae, 0xa9, 0x87, 0xed,
        0xda, 0x3e, 0x8d, 0x84, 0x45, 0xc3, 0xe7, 0x17, 0x3f,
        0x89, 0x34, 0xe3, 0x15, 0x3e, 0x36, 0x4a, 0x31, 0x8f,
        0x2c, 0xa0, 0x08, 0x0a, 0xe3, 0x01, 0xb8, 0x63, 0xe7,
        0xa2, 0x8c, 0xce, 0x11, 0x59, 0x60, 0xab, 0x06, 0x83,
        0xa8, 0xa3, 0x94, 0xa6, 0x1e, 0x6c, 0xab

      };
      auto ret = Pem::read(s2);
      assert.equal(ret.size(), 3);
      for (auto &pem : ret) {
        assert.equal(pem.type, "CERTIFICATE");
        assert.equal(pem.binary.size(), sizeof(binary));
        assert.equal(memcmp(pem.binary.c_str(), binary, sizeof(binary)), 0);
      }
    });
  });
  return exit();
}
